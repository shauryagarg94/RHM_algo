              LARGEST INDEPENDENT SET PROBLEM
              
Given a Binary Tree, find size of the Largest Independent Set(LIS) in it.
A subset of all tree nodes is an independent set if there is no edge between any two nodes of the subset.
A Dynamic Programming solution solves a given problem using solutions of subproblems in bottom up manner. 
Can the given problem be solved using solutions to subproblems? If yes, then what are the subproblems? 
Can we find largest independent set size (LISS) for a node X if we know LISS for all descendants of X? 
If a node is considered as part of LIS, then its children cannot be part of LIS, but its grandchildren can be. 
Following is optimal substructure property.

--> Optimal Substructure:

Let LISS(X) indicates size of largest independent set of a tree with root X.

     LISS(X) = MAX { (1 + sum of LISS for all grandchildren of X),
                     (sum of LISS for all children of X) }
       
       The idea is simple, there are two possibilities for every node X, either X is a member of the set or not a member. 
       If X is a member, then the value of LISS(X) is 1 plus LISS of all grandchildren. 
       If X is not a member, then the value is sum of LISS of all children
       
Time complexity of the above naive recursive approach is exponential. 
It should be noted that the above function computes the same subproblems again and again. 
For example, LISS of node with value 50 is evaluated for node with values 10 and 20 as 50 is grandchild of 10 and child of 20.
Since same suproblems are called again, this problem has Overlapping Subprolems property. 
So LISS problem has both properties (see this and this) of a dynamic programming problem. 
Like other typical Dynamic Programming(DP) problems, recomputations of same subproblems can be avoided by storing the solutions to subproblems and solving problems in bottom up manner.

        EXAMPLE
        INPUT:
        
